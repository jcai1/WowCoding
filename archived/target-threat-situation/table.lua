{
  d = {
    actions = {
      init = {
        custom = "-- I have provided the following options to adjust the behavior of the WeakAura.\n\n---------- BEGIN OPTIONS ----------\n\n-- How frequently to refresh the display. Higher numbers use more CPU, up to refreshing on every frame.\nlocal fps = 15\n\n-- The sound to use for the audio alert. Code for PlaySoundKitID (look up the sound on Wowhead and click Link)\nlocal alertSound = 17852\n\n-- Mutes the audio alert if you are not using a tank spec.\nlocal muteIfNotTanking = true\n\n-- Disables the WeakAura entirely (audio + text) if you are not using a tank spec.\nlocal disableIfNotTanking = false\n\n-- Disables the text display (but not the audio alert) regardsless of your role.\nlocal disableTextDisplay = false\n\n-- The role icons on the text display.\nlocal roleIconNone = \"Interface\\\\Icons\\\\inv_misc_questionmark\"\nlocal roleIconTank = \"Interface\\\\Icons\\\\spell_holy_devotionaura\"\nlocal roleIconHealer = \"Interface\\\\Icons\\\\spell_nature_resistnature\"\nlocal roleIconDamager = \"Interface\\\\Icons\\\\ability_warrior_punishingblow\"\n\n-- List of NPCs for which to hide the threat table and disable the audio alert\n-- You can include either the NPC name or the NPC id\nlocal npcBlacklist = {\n    -- BEGIN Hellfire Citadel\n    90485, -- Felfire Artillery\n    90410, -- Felfire Crusher\n    91103, -- Felfire Demolisher (1)\n    94733, -- (2)\n    90432, -- Felfire Flamebelcher (1)\n    94873, -- (2)\n    93435, -- Felfire Transporter\n    94322, -- Burning Firebomb\n    94312, -- Quick-Fuse Firebomb\n    94326, -- Reactive Firebomb\n    94955, -- Reinforced Firebomb\n    93717, -- Volatile Firebomb\n    91368, -- Crushing Hand\n    93838, -- Grasping Hand\n    93839, -- Dragging Hand\n    93369, -- Salivating Bloodthirster (1)\n    90521, -- (2)\n    92038, -- (3)\n    90477, -- Blood Globule\n    90513, -- Fel Blood Globule\n    93288, -- Corrupted Soul\n    90508, -- Gorebound Construct\n    90568, -- Gorebound Essence\n    90387, -- Shadowy Construct\n    91765, -- Crystalline Fel Prison\n    91938, -- Haunting Soul\n    94397, -- Unstable Voidfiend\n    94231, -- Wild Pyromaniac\n    91270, -- Dread Infernal\n    91259, -- Fel Imp\n    91305, -- Fel Iron Summoner\n    92208, -- Doomfire Spirit\n    92740, -- Hellfire Deathcaller\n    96119, -- Source of Chaos\n    95775, -- Void Star\n    93297, -- Living Shadow\n    -- END Hellfire Citadel\n}\n-- List of NPCs for which to disable the audio alert only\nlocal npcAudioBlacklist = {\n    -- BEGIN Hellfire Citadel\n    93616, -- Dreadstalker\n    94412, -- Infernal Doombringer\n    -- END Hellfire Citadel\n}\n\n---------- END OPTIONS ----------\n\nlocal A, t = aura_env, GetTime()\nlocal ssub, sformat, slen = string.sub, string.format, string.len\nlocal tinsert, tconcat, tsort = table.insert, table.concat, table.sort\n\nA.display = \"\"\nA.t1 = 0\nA.dt1 = 1 / fps\nA.t2 = 0\nA.dt2 = 0.5\n\nlocal function makeTextureString(icon)\n    -- The preceding space is necessary or the alignment gets fucked\n    return \" |T\" .. icon .. \":12|t\"\nend\n\nlocal roleIconStrings = {\n    [\"NONE\"] = makeTextureString(roleIconNone),\n    [\"TANK\"] = makeTextureString(roleIconTank),\n    [\"HEALER\"] = makeTextureString(roleIconHealer),\n    [\"DAMAGER\"] = makeTextureString(roleIconDamager)\n}\n\nlocal npcBlacklistTest = {}\nfor _, v in ipairs(npcBlacklist) do\n    npcBlacklistTest[v] = true\nend\n\nlocal npcAudioBlacklistTest = {}\nfor _, v in ipairs(npcAudioBlacklist) do\n    npcAudioBlacklistTest[v] = true\nend\n\n-- Returns \"BOTH\", \"AUDIO\", or \"NONE\" based on blacklist status\nlocal function npcBlacklistStatus(npcName, npcId)\n    if npcBlacklistTest[npcName] or npcBlacklistTest[npcId] then\n        return \"BOTH\"\n    elseif npcAudioBlacklistTest[npcName] or npcAudioBlacklistTest[npcId] then\n        return \"AUDIO\"\n    else\n        return \"NONE\"\n    end\nend\n\n-- Key: unit GUID\n-- Value: table with the following keys:\n--     If not isPet: unit, name, class, role (all guaranteed); pet (optional)\n--     If isPet: unit, owner, ownerRole, family (all guaranteed)\nlocal players = {}\n\n-- Entry: { player = <entry in players>, threat = <raw threat> }\n-- [1] = <primary target>\n-- [2] = <highest tank>\n-- [3] = <highest non-tank>\n-- [4] = <player>\nlocal threatTbl = {{}, {}, {}, {}}\n\nlocal lines = {}\n\nlocal unitDB = {\n    none = {\"player\"},\n    party = {\"player\", \"party1\", \"party2\", \"party3\", \"party4\"},\n    raid = {}\n}\nfor i = 1, 40 do unitDB.raid[i] = \"raid\" .. i end\n\nlocal function printError(msg)\n    print(A.id .. \" error: \" .. msg)\nend\n\nlocal function fatalError(msg)\n    print(A.id .. \" fatal error: \" .. msg)\n    A.aborted = true\nend\n\nlocal function resetThreatTbl(threatTbl)\n    for i = 1, 4 do\n        threatTbl[i].player = nil\n        threatTbl[i].threat = -1\n        threatTbl[i].alert = nil\n    end\nend\n\nlocal function cmpThreat(a, b)\n    return a.threat > b.threat\nend\n\nlocal function sortThreatTbl(threatTbl)\n    tsort(threatTbl, cmpThreat)\nend\n\nlocal function getUnitList()\n    if IsInRaid() then\n        return unitDB.raid\n    elseif IsInGroup() then\n        return unitDB.party\n    else\n        return unitDB.none\n    end\nend\n\nlocal function getPlayerSpecRole()\n    local playerSpec = GetSpecialization()\n    return playerSpec and select(6, GetSpecializationInfo(playerSpec)) or \"NONE\"\nend\n\n-- Raid status refresh run every 0.5 seconds\nlocal function refreshRaid()\n    local playerSpecRole = getPlayerSpecRole()\n    if playerSpecRole ~= \"TANK\" then\n        if disableIfNotTanking or (disableTextDisplay and muteIfNotTanking) then\n            return\n        end\n    end\n    \n    local unitList = getUnitList()\n    \n    for i = 1, #unitList do\n        local u = unitList[i]\n        local upet = u .. \"pet\"\n        local guid, name, class, role\n        if UnitExists(u) then\n            guid = UnitGUID(u)\n            name = UnitName(u)\n            class = select(2, UnitClass(u))\n            role = UnitGroupRolesAssigned(u)\n        end\n        if guid and name and class and role then\n            players[guid] = players[guid] or {}\n            local p = players[guid]\n            p.unit = u\n            p.name = name\n            p.class = class\n            p.role = role\n            -- p.dead = UnitIsDeadOrGhost(u)\n            p.isPet = false\n            \n            if UnitExists(upet) then\n                local petGUID = UnitGUID(upet)\n                players[petGUID] = players[petGUID] or {}\n                local pet = players[petGUID]\n                pet.isPet = true\n                pet.unit = upet\n                pet.owner = guid\n                pet.ownerRole = role\n                pet.family = UnitCreatureFamily(upet) or \"Pet\"\n                \n                p.pet = petGUID\n            else\n                p.pet = nil\n            end\n            \n            -- p.inCombat = UnitAffectingCombat(u)\n        end\n    end\nend\nA.refreshRaid = refreshRaid\n\nlocal function guidToNpcId(guid)\n    if not guid then\n        return\n    end\n    local n = slen(guid)\n    if ssub(guid, 1, 8) ~= \"Creature\" then\n        return\n    end\n    local lastHyphen, penultHyphen\n    for i = n, 1, -1 do\n        if ssub(guid, i, i) == \"-\" then\n            lastHyphen = i\n            break\n        end\n    end\n    if lastHyphen then\n        for i = (lastHyphen - 1), 1, -1 do\n            if ssub(guid, i, i) == \"-\" then\n                penultHyphen = i\n                break\n            end\n        end\n        if penultHyphen then\n            return tonumber(ssub(guid, penultHyphen + 1, lastHyphen - 1))\n        end\n    end\nend\n\nlocal function getRoleOrOwnerRole(p)\n    if p then\n        return p.isPet and p.ownerRole or p.role\n    end\nend\n\nlocal function playerToString(p)\n    if p.isPet then\n        return playerToString(players[p.owner]) .. \"'s \" .. p.family\n    else\n        return \"|c\" .. RAID_CLASS_COLORS[p.class].colorStr .. p.name .. \"|r\"\n    end\nend\n\nlocal function colorIfTruthy(text, cond, trueColor)\n    if cond then\n        return \"|cff\" .. trueColor .. text .. \"|r\"\n    else\n        return text\n    end\nend\n\nlocal healerOrDamagerTest = {\n    [\"HEALER\"] = true,\n    [\"DAMAGER\"] = true\n}\n\nlocal usedPlayers = {}\nlocal function refreshDisplay()\n    A.display = \"\"\n    \n    if WeakAuras.IsOptionsOpen() then\n        A.display = \"Target Threat Situation\"\n        return\n    end\n    \n    local playerSpecRole = getPlayerSpecRole()\n    if playerSpecRole ~= \"TANK\" then\n        if disableIfNotTanking or (disableTextDisplay and muteIfNotTanking) then\n            return\n        end\n    end\n    \n    local targetGUID = UnitGUID(\"target\")\n    local targetNpcId = targetGUID and guidToNpcId(targetGUID)\n    local targetName = UnitName(\"target\")\n    if not targetNpcId and targetName then\n        return\n    end\n    \n    local blacklistStatus = npcBlacklistStatus(targetName, targetNpcId)\n    if blacklistStatus == \"BOTH\" then\n        return\n    end\n    \n    if not (UnitCanAttack(\"player\", \"target\") and UnitCanAttack(\"target\", \"player\")) then\n        return\n    end\n    \n    local unitList = getUnitList()\n    local tankThreat = 0\n    local tt = threatTbl\n    resetThreatTbl(tt)\n    \n    for i = 1, #unitList do\n        local u = unitList[i]\n        local upet = u .. \"pet\"\n        local p, pet\n        if UnitExists(u) then\n            p = players[UnitGUID(u)]\n        end\n        if UnitExists(upet) then\n            pet = players[UnitGUID(upet)]\n        end\n        \n        if p then\n            local isTanking, _, _, _, threat = UnitDetailedThreatSituation(u, \"target\")\n            if isTanking then\n                tt[1].player = p\n                tt[1].threat = threat or 0\n                tankThreat = threat or 0\n            end\n            if threat then\n                if p.role == \"TANK\" then\n                    if threat > tt[2].threat then\n                        tt[2].player = p\n                        tt[2].threat = threat\n                    end\n                else\n                    if threat > tt[3].threat then\n                        tt[3].player = p\n                        tt[3].threat = threat\n                    end\n                end\n                if UnitIsUnit(u, \"player\") then\n                    tt[4].player = p\n                    tt[4].threat = threat\n                end\n            end\n        end\n        \n        if pet then\n            local isTanking, _, _, _, threat = UnitDetailedThreatSituation(upet, \"target\")\n            if isTanking then\n                tt[1].player = pet\n                tt[1].threat = threat or 0\n                tankThreat = threat or 0\n            end\n            if threat then\n                if p.role == \"TANK\" then\n                    if threat > tt[2].threat then\n                        tt[2].player = pet\n                        tt[2].threat = threat\n                    end\n                else\n                    if threat > tt[3].threat then\n                        tt[3].player = pet\n                        tt[3].threat = threat\n                    end\n                end\n            end\n        end\n    end\n    \n    local tt1Player = tt[1].player\n    local tt3Player = tt[3].player\n    local tt1Role = tt1Player and getRoleOrOwnerRole(tt1Player)\n    local tt3Role = tt3Player and getRoleOrOwnerRole(tt3Player)\n    \n    local playAlertSound = false\n    -- Alert visually if primary target isn't a tank (or tank's pet)\n    -- Alert aurally if primary target is specifically a player with healer/DPS role (minimize annoyance / false positives)\n    if tt1Player and (tt1Role ~= \"TANK\") then\n        tt[1].alert = true\n        if healerOrDamagerTest[tt1Role] and not tt1Player.isPet then\n            playAlertSound = true\n        end\n    -- Alert visually if top non-tank's threat > the top tank's threat\n    -- Alert aurally if top non-tank is specifically a player with healer/DPS role\n    elseif tt3Player and (tt[3].threat > tt[2].threat) then\n        tt[3].alert = true\n        if healerOrDamagerTest[tt3Role] and not tt3Player.isPet then\n            playAlertSound = true\n        end\n    end\n    if playerSpecRole ~= \"TANK\" and muteIfNotTanking then\n        playAlertSound = false\n    end\n    if playAlertSound then\n        PlaySoundKitID(alertSound, MASTER)\n    end\n    \n    if not disableTextDisplay then\n        local primaryTarget = tt[1].player\n        -- Sort threat table before display, invalidating special meaning of tt[1]...tt[4]\n        sortThreatTbl(tt)\n        wipe(lines)\n        wipe(usedPlayers)\n        for i = 1, 4 do\n            local x = tt[i]\n            if x.threat == -1 then break end\n            local p = x.player\n            if p and not usedPlayers[p] then\n                usedPlayers[p] = true\n                local role = getRoleOrOwnerRole(p)\n                local threatPctStr = tankThreat > 0 and sformat(\"%3.f%%%%\", 100 * x.threat / tankThreat) or \"Inf%%\"\n                threatPctStr = (p == primaryTarget) and (\">\" .. threatPctStr .. \"<\") or (\" \" .. threatPctStr .. \" \")\n                lines[#lines + 1] =\n                    colorIfTruthy(threatPctStr, x.alert, \"ff0000\")\n                    .. roleIconStrings[role]\n                    .. playerToString(p)\n            end\n        end\n        A.display = tconcat(lines, \"\\n\")\n    end\nend\nA.refreshDisplay = refreshDisplay\n",
        do_custom = true
      },
      start = {
        custom = "\n\n",
        do_custom = false
      }
    },
    activeTriggerMode = 0,
    customText = "function()\n    local A, t = aura_env, GetTime()\n    if A.aborted then return end\n    \n    if t - A.t2 >= A.dt2 then\n        A.refreshRaid()\n        A.t2 = t\n    end\n    \n    if t - A.t1 >= A.dt1 then\n        A.refreshDisplay()\n        A.t1 = t\n    end\n    \n    return A.display\nend",
    desc = "Arc v0.0 2016-01-12",
    displayText = "%c",
    font = "Fira Mono Medium",
    fontSize = 20,
    height = 19.99995231628418,
    id = "Target Threat Situation",
    init_completed = 1,
    load = {
      difficulty = {
        multi = {}
      },
      faction = {
        multi = {}
      },
      pvptalent = {
        multi = {}
      },
      race = {
        multi = {}
      },
      role = {
        multi = {}
      },
      talent = {
        multi = {}
      },
      use_never = true
    },
    numTriggers = 1,
    regionType = "text",
    selfPoint = "TOP",
    trigger = {
      event = "Conditions",
      type = "status",
      unevent = "auto",
      use_alwaystrue = true,
      use_unit = true
    },
    width = 302,
    xOffset = -0.000244140625,
    yOffset = -0.0001220703125
  },
  m = "d",
  s = "2.2.1.1",
  v = 1421
}